{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["minTagLength","uniqueTags","onTagAddition","onTagRemoval","React","inputValue","setInputValue","tagsList","setTagsList","addTag","tagTobeAdded","newTagsList","uniqueTagList","Array","Set","className","styles","key","tag","Math","onClick","tagToBeRemoved","removeTag","type","value","onChange","event","handleInputChange","onKeyDown","handleKeyDown","App","useState","concat","filter","ReactDOM","render","document","getElementById"],"mappings":"4RAUmC,SAAC,G,QAClCA,wBAAeA,EAAA,I,IACfC,sBAAaA,GAAA,EACbC,kBACAC,iB,EAEoCC,uBAA7BC,OAAYC,O,EACaF,uBAAzBG,OAAUC,OA0BXC,EAAS,SAACC,GACd,IAAMC,EAAc,GAAH,UAAjB,IAEA,GADAT,KACA,GACE,IAAMU,EAAgBC,WAAW,IAAIC,IAArC,IACAN,UAGFA,MAGF,OACE,+BAAKO,UAAWC,GACbT,EAAA,KAAa,mBACZ,gCAAMU,IAAQC,EAAL,IAAYC,cAAgBA,eAArC,MAEE,6BAAGC,QAAS,kBAtBF,SAACC,GACjB,IAAMV,EAAcJ,EAAA,QAAgB,mBAASW,IAAT,KACpCf,KACAK,KAmBwBc,CAAN,I,aAAiC,cAHnC,cAQd,iCACEC,KAAK,OACLC,MAAOnB,EACPoB,SAAU,mBAhDU,SAACC,GACrBA,sBAAJ,MAAkCA,eAIlCpB,EAAcoB,SAAdpB,OAHEA,MA+CIqB,CADQ,IAGVC,UAAW,mBA3CK,SAACF,GACjBrB,SAAJ,GAGIqB,aAAJ,MAAyBA,QACvBjB,EAAOJ,EAAPI,QACAH,OAsCIuB,CADS,QC5CJC,G,MArBH,WAAO,IAAD,EACgB1B,IAAM2B,SAAmB,IADzC,mBACTxB,EADS,KACCC,EADD,KAahB,OACE,kBAAC,EAAD,CACEN,cAZsB,SAACgB,GACzB,IAAMP,EAAcJ,EAASyB,OAAOd,GACpCV,EAAYG,IAWVR,aARqB,SAACkB,GACxB,IAAMV,EAAcJ,EAAS0B,QAAO,SAACf,GAAD,OAASA,IAAQG,KACrDb,EAAYG,QCThBuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9290d0a8.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface Props {\n  minTagLength?: number\n  uniqueTags?: boolean\n  onTagAddition: (tag: string) => void\n  onTagRemoval: (tag: string) => void\n}\n\nconst TagsInput: React.FC<Props> = ({\n  minTagLength = 3,\n  uniqueTags = true,\n  onTagAddition,\n  onTagRemoval\n}) => {\n  const [inputValue, setInputValue] = React.useState<string>('')\n  const [tagsList, setTagsList] = React.useState<string[]>([])\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === ',' || event.target.value === ';') {\n      setInputValue('')\n      return\n    }\n    setInputValue(event.target.value)\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (inputValue.length < minTagLength) {\n      return\n    }\n    if (event.key === ',' || event.key === ';') {\n      addTag(inputValue.trim())\n      setInputValue('')\n    }\n  }\n\n  const removeTag = (tagToBeRemoved: string) => {\n    const newTagsList = tagsList.filter((tag) => tag !== tagToBeRemoved)\n    onTagRemoval(tagToBeRemoved)\n    setTagsList(newTagsList)\n  }\n\n  const addTag = (tagTobeAdded: string) => {\n    const newTagsList = [...tagsList, tagTobeAdded]\n    onTagAddition(tagTobeAdded)\n    if (uniqueTags) {\n      const uniqueTagList = Array.from(new Set(newTagsList))\n      setTagsList(uniqueTagList)\n      return\n    }\n    setTagsList(newTagsList)\n  }\n\n  return (\n    <div className={styles['react-simple-tags']}>\n      {tagsList.map((tag) => (\n        <span key={`${tag}-${Math.random() * Math.random()}`}>\n          {tag}{' '}\n          <a onClick={() => removeTag(tag)} aria-label='remove tag'>\n            &#x2715;\n          </a>\n        </span>\n      ))}\n      <input\n        type='text'\n        value={inputValue}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n          handleInputChange(event)\n        }\n        onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) =>\n          handleKeyDown(event)\n        }\n      />\n    </div>\n  )\n}\n\nexport default TagsInput\n","import React from 'react'\n\nimport TagsInput from 'react-simple-tags'\nimport 'react-simple-tags/dist/index.css'\n\nconst App = () => {\n  const [tagsList, setTagsList] = React.useState<string[]>([])\n\n  const handleTagAddition = (tag: string) => {\n    const newTagsList = tagsList.concat(tag)\n    setTagsList(newTagsList)\n  }\n\n  const handleTagRemoval = (tagToBeRemoved: string) => {\n    const newTagsList = tagsList.filter((tag) => tag !== tagToBeRemoved)\n    setTagsList(newTagsList)\n  }\n\n  return (\n    <TagsInput\n      onTagAddition={handleTagAddition}\n      onTagRemoval={handleTagRemoval}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}